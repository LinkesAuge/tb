---
description: General rules, overvierw, features, file strucutre, python classes, code context etc. for the project
globs: 
---
General rules, overvierw, features, file strucutre, python classes, code context etc. for the project

You have to make sure to always reference your memory.mdc file for more context and keep it updated at the end of your reply anytime you gives feedback, make changes, plan new features or fixes/update.
Also reference the instructions.mdc file for project plans and keep it updated and check off any time that has been done.

## Executive Summary

TB Scout is a Python application designed to automate interactions with the "Total Battle" game. It creates a transparent overlay on the game window to highlight detected elements and provides a GUI to control scanning and automation features. The application uses computer vision techniques to identify game elements and can perform automated actions based on detected patterns.

## What the App Does

TB Scout is a sophisticated game automation tool that:

1. **Detects and tracks** the Total Battle game window (browser or standalone)
2. **Creates a transparent overlay** to visualize detected game elements
3. **Scans the game world** by identifying patterns and text using computer vision
4. **Provides a control interface** for managing scanning and automation features
5. **Automates game interactions** through mouse and keyboard control
6. **Extracts text** from game elements using OCR
7. **Provides debugging tools** for troubleshooting and development

## Code Structure and File Organization

The codebase follows a modular structure with clear separation of concerns:

```
scout/
├── __init__.py                # Package initialization
├── main.py                    # Application entry point
├── overlay.py                 # Transparent overlay implementation
├── gui.py                     # User interface controller
├── template_matcher.py        # Pattern recognition engine
├── text_ocr.py                # Optical character recognition
├── actions.py                 # Game interaction automation
├── config_manager.py          # Configuration handling
├── sound_manager.py           # Sound notifications system
├── window_manager.py          # Game window detection & capture
└── debug_window.py            # Debugging visualization tools
```

## Core Components and Their Relationships

### 1. Main Application (`main.py`)

The entry point that orchestrates all components. It:
- Initializes the Qt application
- Sets up logging
- Creates instances of all major components
- Connects components through dependency injection
- Starts the application event loop

### 2. Window Manager (`window_manager.py`)

Handles detection and interaction with the game window:
- Finds and tracks the Total Battle window
- Captures screenshots of the game window using `mss`
- Provides window position and size information
- Used by most other components to locate and interact with the game

### 3. Overlay (`overlay.py`)

Creates a transparent window on top of the game:
- Uses Qt to create a transparent, clickthrough window
- Draws visual indicators for detected game elements
- Positions itself to match the game window using WindowManager
- Can be toggled on/off

### 4. GUI Controller (`gui.py`)

Provides the user interface for controlling the application:
- Creates control panels with buttons, checkboxes, etc.
- Handles user interactions
- Passes commands to other components
- Contains multiple tabs for different functionality

### 5. Template Matcher (`template_matcher.py`)

Core computer vision engine:
- Uses OpenCV to detect game elements in screenshots
- Loads and matches pattern images against screenshots
- Returns locations and confidence scores for matches
- Configurable through template_settings

### 6. Text OCR (`text_ocr.py`)

Handles text recognition:
- Uses pytesseract to extract text from game elements
- Performs image preprocessing for better recognition
- Provides methods for handling different text formats

### 7. Game Actions (`actions.py`)

Automates interactions with the game:
- Controls mouse movement and clicks
- Triggers keyboard inputs
- Executes sequences of actions
- Uses WindowManager to translate coordinates

### 8. Config Manager (`config_manager.py`)

Handles application configuration:
- Loads and saves settings from files
- Provides access to settings for other components
- Contains default configurations

### 9. Sound Manager (`sound_manager.py`)

Handles audio notifications:
- Plays sound effects for various events
- Manages sound files
- Provides volume control

### 10. Debug Window (`debug_window.py`)

Provides debugging visualization:
- Shows processed images
- Displays recognition results
- Helps with development and troubleshooting

## Component Relationships

The application follows a clear dependency hierarchy:

1. **WindowManager** is a core dependency used by most other components
2. **Overlay** depends on WindowManager and TemplateMatcher
3. **OverlayController** orchestrates Overlay, GameActions and TextOCR
4. **TemplateMatcher** uses WindowManager for screenshots
5. **TextOCR** uses WindowManager for screenshots and DebugWindow for visualization
6. **GameActions** uses WindowManager for coordinate translation
7. **ConfigManager** is used by Main to configure other components

## Key Features in Detail

### Window Detection and Tracking
The application can find the Total Battle window either as a standalone application or within a browser. It keeps track of the window position and size, even if it moves or resizes.

### Screenshot Capture and Analysis
Currently using the `mss` library to capture screenshots of the game window. These screenshots are processed for pattern matching and text recognition.

### Transparent Overlay
A clickthrough transparent window that sits on top of the game, highlighting detected elements with colorful indicators without interfering with game interactions.

### Pattern Matching
Uses OpenCV template matching to find game elements (buildings, resources, enemies, etc.) on the screen by comparing them to pre-defined pattern images.

### OCR Text Extraction
Uses pytesseract to extract text from the game screen, allowing the app to read values, names, and other textual information.

### Automation Controls
Provides mouse and keyboard automation to interact with the game, allowing for automated scanning, resource collection, and other actions.

### Debug Visualization
Offers visualization tools to see what the application is detecting, useful for development and troubleshooting.

### Configuration System
Flexible settings system that allows customization of overlay appearance, pattern matching sensitivity, and other application behaviors.

## Current Limitations

1. The screen capture system uses `mss`, which could be replaced with a more native Qt-based solution for better integration
2. The system is currently Windows-focused due to the use of win32api for window management

## Conclusion

TB Scout is a well-structured application that demonstrates effective separation of concerns and modular design. Each component has a clear responsibility and interfaces well with other parts of the system. The application successfully combines computer vision, GUI development, and automation to create a powerful tool for the Total Battle game.